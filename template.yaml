AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Custom Resource Example

Parameters:

  Env:
    Type: String
    Description: Environment
    Default: dev

Resources:

  DataDogMonitorLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/boundary_platform'
      Path: /platform/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: DDSecrets
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 'secretsmanager:GetSecretValue'
                Resource: !Sub 'arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${Env}/CloudFormation/DataDogKeys*'

  DataDogMonitorLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: datadog_lambda_function.handler
      Runtime: python3.6
      Description: A function which manages the creation of monitors in DataDog.
      Role: !GetAtt DataDogMonitorLambdaRole.Arn 
      Tracing: Active
      Environment:
        Variables:
          SECRETS: !Sub '${Env}/CloudFormation/DataDogKeys' 
  
  TestRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      PermissionsBoundary: !Sub 'arn:aws:iam::${AWS::AccountId}:policy/boundary_platform'
      Path: /platform/
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess

  TestLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: lambda_function.handler
      Runtime: python3.6
      Description: A test function.
      Role: !GetAtt TestRole.Arn
      Tracing: Active
      Tags:
        env: !Ref Env
      
  TestLambdaDDMonitor:
    Type: 'Custom::DataDogMonitor'
    Properties: 
      ServiceToken: !GetAtt DataDogMonitorLambda.Arn
      Name: "CR TestLambda Monitor"
      FunctionName: !Ref TestLambda
      Message: "Test Message \n@harry.daniels@email.co.uk"
      Priority: 3
      Tags: 
        - "env:dev"
